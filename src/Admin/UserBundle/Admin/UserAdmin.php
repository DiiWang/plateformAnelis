<?php

namespace Admin\UserBundle\Admin;

use Admin\UserBundle\Form\TelType;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\DateType;

class UserAdmin extends AbstractAdmin
{
    /**
     * Used to avoid password change when editing an User.
     */
    public function preUpdate($object)
    {
        parent::preUpdate($object); // TODO: Change the autogenerated stub

        $plainPassword = $object->getPlainPassword();
        $user = $this->getConfigurationPool()->getContainer()->get('Doctrine')->getManager()->getRepository('Admin\UserBundle\Entity\User')->find($object->getId());
        if(empty($plainPassword)) //Si le champ password n'est pas rempli.
        {
            $object->setPassword($user->getPassword());
        }
    }


    // Fields to be shown on create/edit forms
    protected function configureFormFields(FormMapper $formMapper)
    {
        $roles = $this->getConfigurationPool()->getContainer()->getParameter('security.role_hierarchy.roles');
        $rolesChoices = self::flattenRoles($roles);

        $formMapper
            ->add('username', TextType::class, array('label' => 'Username',
                'required' => true))
            /**
             * Actually, living an empty field does not update the password while editing.
             * At user creation, it throws an error if the field is empty
             */
            ->add('plainpassword', PasswordType::class, array('label' => 'Mot de Passe* (Laissez vide pour ne pas le changer)',
                'required' => false))

            ->add('email', TextType::class, array('label' => 'Email',
                'required' => true))

            ->add('isEmailValid', CheckboxType::class, array('label' => 'Email valide ?',
                'required' => false))

            ->add('name', TextType::class, array('label' => 'Nom',
                'required' => true))

            ->add('surname', TextType::class, array('label' => 'Prénom',
                'required' => true))

            ->add('promotion', ChoiceType::class, array(
                'choices' => $this->lstPromotions(),
                'required' => true
            ))

            ->add('filiere', ChoiceType::class, array(
                'choices' => array(
                    'F1' => 'F1',
                    'F2' => 'F2',
                    'F3' => 'F3',
                    'F4' => 'F4',
                    'F5' => 'F5',
                    'FI' => 'FI'
                    ),
                'required' => true
            ))

            ->add('genre', ChoiceType::class, array(
                'choices' => array(
                    'M' => 'M',
                    'F' => 'F'
                    ),
                'required' => false
            ))

            ->add('birthday', DateType::class, array('label' => 'Date de naissance', 'required' => true))

            ->add('maritalName', TextType::class, array('label' => 'Nom Marital', 'required' => false))

            ->add('nickname', TextType::class, array('label' => 'Surnom', 'required' => false))

            ->add('address', TextType::class, array('label' => 'Adresse', 'required' => false))

            ->add('postalcode', TextType::class, array('label' => 'Code Postal', 'required' => false))

            ->add('city', TextType::class, array('label' => 'Ville', 'required' => false))

            ->add('country', TextType::class, array('label' => 'Pays', 'required' => false))

            ->add('telephone', TelType::class, array('label' => 'Numéro de Téléphone', 'required' => false))

            ->add('website', TextType::class, array('label' => 'Site Web', 'required' => false))

            ->add('socialFacebook', TextType::class, array('label' => 'Lien Facebook', 'required' => false))

            ->add('socialTwitter', TextType::class, array('label' => 'Lien Twitter', 'required' => false))

            ->add('socialGoogle', TextType::class, array('label' => 'Lien Google+', 'required' => false))

            ->add('socialYoutube', TextType::class, array('label' => 'Chaine Youtube', 'required' => false))

            ->add('socialInstagram', TextType::class, array('label' => 'Page Instagram', 'required' => false))

            ->add('biography', TextareaType::class, array('label' => 'Biographie', 'required' => false))

            ->add('maritalStatus', ChoiceType::class, array(
                'choices'   => array(
                    'Célibataire' => 'Célibataire',
                    'En couple' => 'En couple',
                    'Fiancé(e)' => 'Fiancé(e)',
                    'Marié(e)' => 'Marié(e)',
                    'En union libre' => 'En union libre'
                ),
                'required' => false
            ))

            ->add('childrenNumber', IntegerType::class, array('label' => 'Nombre d\'enfants', 'required' => false))

            ->add('roles', ChoiceType::class, array('choices' => $rolesChoices, 'multiple' => true, ))

        ;
    }

    // Fields to be shown on filter forms
    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        //TODO : Add french labels here
        $datagridMapper
            ->add('promotion')
            ->add('filiere')
            ->add('name')
            ->add('isEmailValid')
        ;
    }

    // Fields to be shown on lists
    protected function configureListFields(ListMapper $listMapper)
    {
        //TODO : Add french labels here
        $listMapper
            ->addIdentifier('name')
            ->addIdentifier('surname')
            ->add('promotion')
            ->add('filiere')
            ->add('email')
            ->add('city')
            ->add('telephone')
            // add custom action links
            ->add('_action', 'actions', array(
                'actions' => array(
                    'show' => array(),
                    'edit' => array(),
                )
            ))
        ;
    }

    protected function lstPromotions() {
        $result;

        for ($i = 1995 ; $i <= date('Y')+2 ; $i++) {
            $result["".$i] = $i;
        }
        return $result;
    }

    protected static function flattenRoles($rolesHierarchy)
    {
        $flatRoles = array();
        foreach($rolesHierarchy as $roles) {

            if(empty($roles)) {
                continue;
            }

            foreach($roles as $role) {
                if(!isset($flatRoles[$role])) {
                    $flatRoles[$role] = $role;
                }
            }
        }

        return $flatRoles;
    }

    protected function configureShowFields(ShowMapper $show)
    {
        $show
            ->add('username')

            ->add('email')

            ->add('name')

            ->add('surname')

            ->add('promotion')

            ->add('filiere')

            ->add('birthday')

            ->add('maritalName')

            ->add('nickname')

            ->add('address')

            ->add('postalcode')

            ->add('city')

            ->add('country')

            ->add('telephone')

            ->add('website')

            ->add('socialFacebook')

            ->add('socialTwitter')

            ->add('socialGoogle')

            ->add('socialYoutube')

            ->add('socialInstagram')

            ->add('biography')

            ->add('maritalStatus')

            ->add('childrenNumber')

            ->add('roles')
            ;
    }


}